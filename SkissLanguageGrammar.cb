// global -> local -> shared
   
// callable and/or implementable macros should be a thing to be implemented for later:
// callable macros start with @, for example,
// @server just before basis implements the macro (like a decorator in this case)
// implementable macro syntax can also be used when overloading, for example,
// @multiply(vec3f1, vec3f2) which would execute the overload for the name multiply,
// in this case it would multiply vec3f1 with vec3f2 using the rules defined in the overload
// print@("SOMETEXT") would be an example of a callable macro

// macros should be a thing to be implemented for later:
// macros end with @ when called, for example,
// print@ putting the @ just after the macro name executing the macro using the name

// can scope to context or type:
// content can be global, local or shared
// types are just what they seem like

// self: should be implemented for compositions and types

// unsure if: [] or {} should be used for certain code bodies

// how should doc strings be structured by default . . . ?

// should be able to type u8 or char for unsigned int of byte size 1, in bits, being 8

// [] after a macro definition is used to specify the arguments for a macro
// Macros do not end with semi colons
// Below 2 lines, "package@" are redundent when "init.json" is properly implemented
// package@["SYS"]("stdlib.cb");          // include sourcefile code navigation start from default systempath
// package@["LOC"]("../stuffandshit.cb"); // include sourcefile code navigation start from local filepath

global basis main(void) return i32
{
	output: char = getFifth[char](); // before (), [char] = return type of function
	output2: string = getFifth[string](); 
	m1<f32, i32>(12.5f, 12); 

	vector1: Math.vec3f = new Math.vec3f(12.5f, 12.5f, 12.5f);
	vector2: Math.vec3f = new Math.vec3f(2.0f, 2.0f, 2.0f);

	vectorOut: Math.vec3f = @multiply(vector1, vector2);

	print@(vectorOut); // would need a toString function to make this properly work with print macro

	test.printPhrase("Hello World!"); // Would output "Hello World!" to the console
	// Below line means that we could have to functions with the same name in one composition
	// Would also output "Hello World!"
	test.coolEssentials.printPhrase("Hello World!");
	/* output2: char = getFifth<i32>[char](12); this would mean that the first argument passed is a i32 type and the return type will be a char, the input value for the argument is an i32 with the value 12 */
} 

global basis getFifth(void) return [char | string]
{
	global for scope
	{
		// do stuff here that every return has access to
	} 

	local for scope[char]
	{
		charStart: char = 'a'; 
	}
	
	local for scope[string]
	{
		strStart: i32 = "abc"; 
	}
}

impl return char as getFifth with (void)
{
	// Är det här värt att ha med? Känns ganska värdelöst . . .
	@basis_include scope[local];
	while ( scope[local].charStart as i32 < 'e' as i32 )
	{
		local.charStart++;
	}
}
impl return string as getFifth with (void)
{
	findNewEndOfString: i32 = (scope[local].strStart[::-1] as i32)++;
	while (findNewEndOfString < ('e' as i32))
	{
		scope[local].strStart += findNewEndOfString;
		repeat(findNewEndOfString)
	}	
}

// Depth counter = 0
// The members of composition Test can be accessed from Depth level 1 using Base keyword . . .
global composition Test
{
	global for scope
	{
		// Members can be accessed from anywhere . . .
	}

	local for scope
	{
		// Members can only be accessed in composition "Test" . . .
	}

	shared for scope
	{
		// Members can only be accessed in composition "Test" and 
		// compositions cast to "Test", basically "Unit" would be allowed 
		// to access these members . . .

		sum: i32[_];
	}

	// If "compound@(X)" is removed, you would need to type the full path to the component&componentMember
	compound@(coolEssentials);
	component coolEssentials
	{
		printPhrase(text: string)
		{
			print@(text);
		}
	}

	global basis m1 with (i: f32, j: i32) return void
	{
		print@("f32, i32 :: method");
	}  
	global basis m1 with (i: f32, j: f32) return void
	{
		print@("f32, f32 :: method");
	}

	constructor with (x: i32, y: i32)
	{
		sum += (x + y);
	}
}

// Depth counter = 1
global composition Unit as Test
{
	// Compositions can not be cast another time to "Unit" in this case
	// This is to reduce abstraction and complexity of codebases

	global basis printNewValue with (void) return void
	{
		// Would need a toString function to make this work
		print@(Base.sum);
	}

	constructor with (anotherSum: i32)
	{
		Base.constructor(__build__);
		Base.sum += anotherSum;
	}
}

/* A composition should encapsulate all necessary data, components, types, etc . . . */
global composition Math
{
	constructor with (number: i32)
	{

	}
	
	// borde även kunna skrivas som:
	/*
	constructor with (number: i32) // kanske kan ha det här: using (number: i32)
	{

	}
	*/
}

component mathEssentials
{
	basis isZero = isZero<void>[vec3f];

	basis sum with (x: i32, y: i32) return i32
	{
		return x + y;
	}
}

global basis isZero with (void) return vec3f
{
	isZero: bool = False;
	if ( self.x == 0.0f 
	&&   self.y == 0.0f
	&&   self.z == 0.0f )
	{
		isZero = True;
	}
	return isZero;
} 

compound@(mathEssentials);
impl type vec3f for Math
{
	constructor with (x: f32, y: f32, z: f32)
	{
		self.x = x;
		self.y = y;
		self.z = z;	
	}
}

// The macro is using something else, 
// in this case the type vec3f 
// using something means to define a body with said used item 
// therefore, this looks different
// it can also be refered to as an implementable macro . . .
overload@(@multiply) for vec3f with other vec3f
{
	vec3f.x *= other.x;
	vec3f.y *= other.y;
	vec3f.z *= other.z;
	return vec3f;	
}

impl global composition Vector for Math
{
	constructor with (number: i32)
	{

	}

	// border även kunna skrivas som:
	/*
	constructor with (number: i32)
	{

	}
	*/
}

impl global basis isEven with (number: i32) return bool for Math // return could possibly be turned into keyword [returning] without the brackets?
{
	isEven: bool = False
	if ( number % 2 == 0 ) isEven = True;
	return isEven;
}

/*
global basis isEven with (number: i32) return [bool] >> 
	global return isEven: bool = False
{
	if ( number % 2  == 0 ) isEven = True;
}
*/

/*
local basis isEven(number: i32) -> bool until True -> isEven = False
{
	if ( number % 2  == 0 ) isEven = True;
}
*/